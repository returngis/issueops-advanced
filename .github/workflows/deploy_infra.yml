name: üöÄ Deploy Infrastructure

on:
  issue_comment:
    types: [created]


env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.TF_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.TF_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.TF_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.TF_TENANT_ID }}
  PROJECT_NUMBER: 8
  ORG_NAME: returngis

concurrency:
  group: ${{ github.event.issue.number }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  actions: read  

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4   

    - uses: github/command@v1.2.2
      id: command
      with:
        command: ".approved"
        reaction: "rocket"
        allowed_contexts: "issue"
        permissions: "maintain,admin"
        allowlist: 0gis0

    - name: Check for label starting with "issueops:"
      run: |
          labels=$(echo '${{ toJson(github.event.issue.labels) }}' | jq -r '.[] | select(.name | startswith("issueops:")) | .name')
          if [ -n "$labels" ]; then
            echo "Label found: $labels"

            # label without issueops: prefix
            infra_type=$(echo $labels | sed 's/issueops://')

            echo "TF_WORKDIR=terraform/$infra_type" >> $GITHUB_ENV 
            echo "INFRA_TYPE=$infra_type" >> $GITHUB_ENV
          else
            echo "No label found starting with 'palabra'"
          fi    

    - name: Find Comments
      id: fc
      uses: peter-evans/find-comment@v3.1.0
      with:    
        issue-number: ${{ github.event.issue.number }}      
        comment-author: 'github-actions[bot]'    
        body-includes: 'Run ID'        
        token: ${{ secrets.GITHUB_TOKEN }}
  
    - name: show run id
      run: |
          echo "Comment ID: ${{ steps.fc.outputs.comment-id }}"
          echo "Comment Body: ${{ steps.fc.outputs.comment-body }}"
          echo "Comment author: ${{ steps.fc.outputs.comment-author }}"
          echo "Comment create at: ${{ steps.fc.outputs.comment-created-at }}"
      
    - name: Get the run ID
      id: get_run_id
      run: |
        echo "Comment Body: ${{ steps.fc.outputs.comment-body }}"
        echo "::set-output name=run_id::$(echo ${{ steps.fc.outputs.comment-body }} | grep -oP 'Run ID: \K\d+')"

    - name: Download artifact related with this issue
      uses: actions/download-artifact@v4.1.8
      with:
        name: artifact
        github-token: ${{ github.token }}
        run-id: ${{ steps.get_run_id.outputs.run_id }}
        
    - name: List files in artifact
      run: ls $GITHUB_WORKSPACE

    - name: Set up Terraform üß≥
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init üèó
      id: init
      run: | 
        terraform init \
        -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP_NAME }}" \
        -backend-config="storage_account_name=${{ secrets.TF_STATE_AZURE_STORAGE_NAME }}" \
        -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER_NAME }}" \
        -backend-config="key=issue-${{ github.event.issue.number }}-terraform.tfstate" \
        -backend-config="access_key=${{ secrets.TF_STATE_STORAGE_ACCESS_KEY }}"
      working-directory: ${{ env.TF_WORKDIR }}

    - name: Terraform Apply Plan üöÄ
      id: apply
      run: |
        terraform apply -auto-approve $GITHUB_WORKSPACE/tfplan.out
      working-directory: ${{ env.TF_WORKDIR }}

    - name: Remove Labels üóëÔ∏è
      id: remove-labels
      uses: issue-ops/labeler@v2.1.0
      with:
        action: remove
        issue_number: ${{ github.event.issue.number }}
        labels: |
          requested üëÜüèª‚åõÔ∏è         

    - name: Add Labels 
      id: add-labels
      uses: issue-ops/labeler@v2.1.0
      with:
        action: add
        issue_number: ${{ github.event.issue.number }}
        labels: |
          deployed üöÄ‚úÖ

    - name: Generate token
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.ISSUE_OPS_APP_ID }}
        private-key: ${{ secrets.ISSUE_OPS_APP_PEM }}
    

    - name: Check issue number
      run: |
        echo "Issue number: ${{ github.event.issue.number }}"
    
    - name: Change the status to Deployed üöÄ
      run: |

        # gh project list --owner returngis
        # gh project list --owner ${{ env.ORG_NAME }}

        # gh project view 8 --owner returngis
        # gh project view ${{ env.PROJECT_NUMBER }} --owner ${{ env.ORG_NAME }}

        # gh project view 8 --owner returngis --format json -q '.id'
        PROJECT_ID=$(gh project view ${{ env.PROJECT_NUMBER }} --owner ${{ env.ORG_NAME }} --format json | jq .id)

        # gh project item-list 8 --owner returngis
        # gh project item-list ${{ env.PROJECT_NUMBER }} --owner ${{ env.ORG_NAME }}

        # gh project item-list 8 --format json --owner returngis --jq '.items[] | select(.content.number == 15) | .id'
        PROJECT_ITEM_ID=$(gh project item-list ${{ env.PROJECT_NUMBER }} --owner ${{ env.ORG_NAME }} --format json | jq '.items[] | select(.content.number == ${{ github.event.issue.number }})' | jq .id)        

        # gh project field-list 8 --owner returngis --format json | jq '.fields[] | select(.name == "Status") | .id'
        STATUS_FIELD_ID=$(gh project field-list ${{ env.PROJECT_NUMBER }} --owner ${{ env.ORG_NAME }} --format json | jq '.fields[] | select(.name == "Status") | .id')

        echo "Project ID: $PROJECT_ID"
        echo "Project Item ID: $PROJECT_ITEM_ID"
        echo "Status Field ID: $STATUS_FIELD_ID"

        echo "Change to Deployed"

        # gh project item-edit --id PVTI_lADOA9pFl84AtAnvzgVGAeQ  --field-id "Status" --text "Deployed üöÄ" --project-id PVT_kwDOA9pFl84AtAnv
        gh project item-edit --id $PROJECT_ITEM_ID --field-id $STATUS_FIELD_ID --text "Deployed üöÄ" --project-id $PROJECT_ID

      env:
        GH_TOKEN: ${{ steps.generate-token.outputs.token }}
